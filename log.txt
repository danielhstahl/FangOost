g++ -std=c++14 -O3 -pthread --coverage -c test.cpp -I ../FunctionalUtilities -fopenmp 
In file included from test.cpp:2:0:
test.cpp: In function ‘void ____C_A_T_C_H____T_E_S_T____60()’:
test.cpp:95:29: error: no match for ‘operator==’ (operand types are ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ and ‘Catch::Detail::Approx’)
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                             ^
In file included from FangOost.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:468:5: note: candidate: template<class _Tp> constexpr bool std::operator==(const _Tp&, const std::complex<_Tp>&)
     operator==(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:468:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘Catch::Detail::Approx’ is not derived from ‘const std::complex<_Tp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from FangOost.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:463:5: note: candidate: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const _Tp&)
     operator==(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/include/c++/5/complex:463:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   deduced conflicting types for parameter ‘const _Tp’ (‘double’ and ‘Catch::Detail::Approx’)
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from FangOost.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:458:5: note: candidate: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:458:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘Catch::Detail::Approx’ is not derived from ‘const std::complex<_Tp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/map:62:0,
                 from catch.hpp:3941,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_multimap.h:974:5: note: candidate: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&, const std::multimap<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_multimap.h:974:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::multimap<_Key, _Tp, _Compare, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/map:61:0,
                 from catch.hpp:3941,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_map.h:1073:5: note: candidate: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const std::map<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_map.h:1073:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::map<_Key, _Tp, _Compare, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/set:62:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_multiset.h:825:5: note: candidate: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key, _Compare, _Alloc>&)
     operator==(const multiset<_Key, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_multiset.h:825:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::multiset<_Key, _Compare, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/set:61:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_set.h:842:5: note: candidate: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key, _Compare, _Alloc>&)
     operator==(const set<_Key, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_set.h:842:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::set<_Key, _Compare, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/set:60:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_tree.h:1273:5: note: candidate: template<class _Key, class _Val, class _KeyOfValue, class _Compare, class _Alloc> bool std::operator==(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&, const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&)
     operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_tree.h:1273:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/set:60:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_tree.h:324:5: note: candidate: template<class _Val> bool std::operator==(const std::_Rb_tree_iterator<_Tp>&, const std::_Rb_tree_const_iterator<_Val>&)
     operator==(const _Rb_tree_iterator<_Val>& __x,
     ^
/usr/include/c++/5/bits/stl_tree.h:324:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::_Rb_tree_iterator<_Tp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/iterator:66:0,
                 from catch.hpp:2340,
                 from test.cpp:2:
/usr/include/c++/5/bits/stream_iterator.h:130:5: note: candidate: template<class _Tp, class _CharT, class _Traits, class _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)
     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
     ^
/usr/include/c++/5/bits/stream_iterator.h:130:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:347:5: note: candidate: template<class _Tp> bool std::operator==(std::nullptr_t, const std::shared_ptr<_Tp1>&)
     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr.h:347:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   cannot convert ‘myInverse.std::vector<_Tp, _Alloc>::operator[]<std::complex<double>, std::allocator<std::complex<double> > >(((std::vector<std::complex<double>, std::allocator<std::complex<double> > >::size_type)i))’ (type ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’) to type ‘std::nullptr_t’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:342:5: note: candidate: template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp1>&, std::nullptr_t)
     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr.h:342:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::shared_ptr<_Tp1>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:336:5: note: candidate: template<class _Tp1, class _Tp2> bool std::operator==(const std::shared_ptr<_Tp1>&, const std::shared_ptr<_Tp2>&)
     operator==(const shared_ptr<_Tp1>& __a,
     ^
/usr/include/c++/5/bits/shared_ptr.h:336:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::shared_ptr<_Tp1>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/shared_ptr.h:52:0,
                 from /usr/include/c++/5/memory:82,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr_base.h:1194:5: note: candidate: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)
     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr_base.h:1194:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   cannot convert ‘myInverse.std::vector<_Tp, _Alloc>::operator[]<std::complex<double>, std::allocator<std::complex<double> > >(((std::vector<std::complex<double>, std::allocator<std::complex<double> > >::size_type)i))’ (type ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’) to type ‘std::nullptr_t’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/shared_ptr.h:52:0,
                 from /usr/include/c++/5/memory:82,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr_base.h:1189:5: note: candidate: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)
     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr_base.h:1189:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::__shared_ptr<_Tp, _Lp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/shared_ptr.h:52:0,
                 from /usr/include/c++/5/memory:82,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr_base.h:1183:5: note: candidate: template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2, _Lp>&)
     operator==(const __shared_ptr<_Tp1, _Lp>& __a,
     ^
/usr/include/c++/5/bits/shared_ptr_base.h:1183:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::__shared_ptr<_Tp1, _Lp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:81:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/unique_ptr.h:635:5: note: candidate: template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t, const std::unique_ptr<_Tp, _Dp>&)
     operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
     ^
/usr/include/c++/5/bits/unique_ptr.h:635:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   cannot convert ‘myInverse.std::vector<_Tp, _Alloc>::operator[]<std::complex<double>, std::allocator<std::complex<double> > >(((std::vector<std::complex<double>, std::allocator<std::complex<double> > >::size_type)i))’ (type ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’) to type ‘std::nullptr_t’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:81:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/unique_ptr.h:630:5: note: candidate: template<class _Tp, class _Dp> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)
     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
     ^
/usr/include/c++/5/bits/unique_ptr.h:630:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::unique_ptr<_Tp, _Dp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:81:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/unique_ptr.h:624:5: note: candidate: template<class _Tp, class _Dp, class _Up, class _Ep> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up, _Ep>&)
     operator==(const unique_ptr<_Tp, _Dp>& __x,
     ^
/usr/include/c++/5/bits/unique_ptr.h:624:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::unique_ptr<_Tp, _Dp>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:79:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/functional:2339:5: note: candidate: template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t, const std::function<_Res(_ArgTypes ...)>&)
     operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
     ^
/usr/include/c++/5/functional:2339:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   cannot convert ‘myInverse.std::vector<_Tp, _Alloc>::operator[]<std::complex<double>, std::allocator<std::complex<double> > >(((std::vector<std::complex<double>, std::allocator<std::complex<double> > >::size_type)i))’ (type ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’) to type ‘std::nullptr_t’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/memory:79:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/functional:2333:5: note: candidate: template<class _Res, class ... _Args> bool std::operator==(const std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)
     operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
     ^
/usr/include/c++/5/functional:2333:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::function<_Res(_ArgTypes ...)>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/functional:55:0,
                 from /usr/include/c++/5/memory:79,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/tuple:915:5: note: candidate: template<class ... _TElements, class ... _UElements> constexpr bool std::operator==(const std::tuple<_Elements ...>&, const std::tuple<_Elements ...>&)
     operator==(const tuple<_TElements...>& __t,
     ^
/usr/include/c++/5/tuple:915:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::tuple<_Elements ...>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/tuple:39:0,
                 from /usr/include/c++/5/functional:55,
                 from /usr/include/c++/5/memory:79,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/array:240:5: note: candidate: template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)
     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
     ^
/usr/include/c++/5/array:240:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::array<_Tp, _Nm>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1878:5: note: candidate: template<class _RealType1> bool std::operator==(const std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)
     operator==(const std::normal_distribution<_RealType>& __d1,
     ^
/usr/include/c++/5/bits/random.tcc:1878:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::normal_distribution<_RealType>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/vector:64:0,
                 from /usr/include/c++/5/bits/random.h:34,
                 from /usr/include/c++/5/random:49,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_vector.h:1511:5: note: candidate: template<class _Tp, class _Alloc> bool std::operator==(const std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)
     operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
     ^
/usr/include/c++/5/bits/stl_vector.h:1511:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::vector<_Tp, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/locale_facets.h:48:0,
                 from /usr/include/c++/5/bits/basic_ios.h:37,
                 from /usr/include/c++/5/ios:44,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/streambuf_iterator.h:204:5: note: candidate: template<class _CharT, class _Traits> bool std::operator==(const std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT, _Traits>&)
     operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
     ^
/usr/include/c++/5/bits/streambuf_iterator.h:204:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::istreambuf_iterator<_CharT, _Traits>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:303:3: note: candidate: bool std::operator==(const std::error_condition&, const std::error_condition&)
   operator==(const error_condition& __lhs,
   ^
/usr/include/c++/5/system_error:303:3: note:   no known conversion for argument 1 from ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ to ‘const std::error_condition&’
/usr/include/c++/5/system_error:296:3: note: candidate: bool std::operator==(const std::error_condition&, const std::error_code&)
   operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
   ^
/usr/include/c++/5/system_error:296:3: note:   no known conversion for argument 1 from ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ to ‘const std::error_condition&’
/usr/include/c++/5/system_error:289:3: note: candidate: bool std::operator==(const std::error_code&, const std::error_condition&)
   operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
   ^
/usr/include/c++/5/system_error:289:3: note:   no known conversion for argument 1 from ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ to ‘const std::error_code&’
/usr/include/c++/5/system_error:284:3: note: candidate: bool std::operator==(const std::error_code&, const std::error_code&)
   operator==(const error_code& __lhs, const error_code& __rhs) noexcept
   ^
/usr/include/c++/5/system_error:284:3: note:   no known conversion for argument 1 from ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ to ‘const std::error_code&’
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4937:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4937:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4925:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const _CharT* __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4925:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   mismatched types ‘const _CharT*’ and ‘std::complex<double>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4911:5: note: candidate: template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value, bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const std::__cxx11::basic_string<_CharT>&)
     operator==(const basic_string<_CharT>& __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4911:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::__cxx11::basic_string<_CharT>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4904:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4904:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/string:41:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/allocator.h:134:5: note: candidate: template<class _Tp> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_CharT>&)
     operator==(const allocator<_Tp>&, const allocator<_Tp>&)
     ^
/usr/include/c++/5/bits/allocator.h:134:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::allocator<_CharT>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/string:41:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/allocator.h:128:5: note: candidate: template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_T2>&)
     operator==(const allocator<_T1>&, const allocator<_T2>&)
     ^
/usr/include/c++/5/bits/allocator.h:128:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::allocator<_CharT>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:1071:5: note: candidate: template<class _Iterator> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_Iterator>&)
     operator==(const move_iterator<_Iterator>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:1071:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::move_iterator<_Iterator>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:1065:5: note: candidate: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_IteratorR>&)
     operator==(const move_iterator<_IteratorL>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:1065:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::move_iterator<_Iterator>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:342:5: note: candidate: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)
     operator==(const reverse_iterator<_IteratorL>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:342:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::reverse_iterator<_Iterator>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:292:5: note: candidate: template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)
     operator==(const reverse_iterator<_Iterator>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:292:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::reverse_iterator<_Iterator>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:64:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_pair.h:214:5: note: candidate: template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)
     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
     ^
/usr/include/c++/5/bits/stl_pair.h:214:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::pair<_T1, _T2>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from /usr/include/c++/5/iosfwd:40:0,
                 from /usr/include/c++/5/ios:38,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/postypes.h:216:5: note: candidate: template<class _StateT> bool std::operator==(const std::fpos<_StateT>&, const std::fpos<_StateT>&)
     operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
     ^
/usr/include/c++/5/bits/postypes.h:216:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
test.cpp:95:56: note:   ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ is not derived from ‘const std::fpos<_StateT>’
         REQUIRE(myInverse[i]==Approx(referenceNormal[i]));
                                                        ^
In file included from test.cpp:2:0:
catch.hpp:2659:21: note: candidate: bool Catch::Detail::operator==(const Catch::Detail::Approx&, double)
         friend bool operator == ( Approx const& lhs, double rhs ) {
                     ^
catch.hpp:2659:21: note:   no known conversion for argument 1 from ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ to ‘const Catch::Detail::Approx&’
catch.hpp:2654:21: note: candidate: bool Catch::Detail::operator==(double, const Catch::Detail::Approx&)
         friend bool operator == ( double lhs, Approx const& rhs ) {
                     ^
catch.hpp:2654:21: note:   no known conversion for argument 1 from ‘__gnu_cxx::__alloc_traits<std::allocator<std::complex<double> > >::value_type {aka std::complex<double>}’ to ‘double’
In file included from test.cpp:2:0:
catch.hpp: In instantiation of ‘static bool Catch::Internal::Evaluator<T1, T2, (Catch::Internal::Operator)0u>::evaluate(const T1&, const T2&) [with T1 = std::complex<double>; T2 = Catch::Detail::Approx]’:
catch.hpp:1381:47:   required from ‘bool Catch::Internal::compare(const T1&, const T2&) [with Catch::Internal::Operator Op = (Catch::Internal::Operator)0u; T1 = std::complex<double>; T2 = Catch::Detail::Approx]’
catch.hpp:1874:50:   required from ‘Catch::ResultBuilder& Catch::ExpressionLhs<T>::captureExpression(const RhsT&) [with Catch::Internal::Operator Op = (Catch::Internal::Operator)0u; RhsT = Catch::Detail::Approx; T = const std::complex<double>&]’
catch.hpp:1817:54:   required from ‘Catch::ResultBuilder& Catch::ExpressionLhs<T>::operator==(const RhsT&) [with RhsT = Catch::Detail::Approx; T = const std::complex<double>&]’
test.cpp:95:9:   required from here
catch.hpp:1336:40: error: no match for ‘operator==’ (operand types are ‘std::complex<double>’ and ‘Catch::Detail::Approx’)
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from FangOost.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:468:5: note: candidate: template<class _Tp> constexpr bool std::operator==(const _Tp&, const std::complex<_Tp>&)
     operator==(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:468:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘Catch::Detail::Approx’ is not derived from ‘const std::complex<_Tp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from FangOost.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:463:5: note: candidate: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const _Tp&)
     operator==(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/include/c++/5/complex:463:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   deduced conflicting types for parameter ‘const _Tp’ (‘double’ and ‘Catch::Detail::Approx’)
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from FangOost.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:458:5: note: candidate: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:458:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘Catch::Detail::Approx’ is not derived from ‘const std::complex<_Tp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/map:62:0,
                 from catch.hpp:3941,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_multimap.h:974:5: note: candidate: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&, const std::multimap<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_multimap.h:974:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::multimap<_Key, _Tp, _Compare, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/map:61:0,
                 from catch.hpp:3941,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_map.h:1073:5: note: candidate: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const std::map<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_map.h:1073:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::map<_Key, _Tp, _Compare, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/set:62:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_multiset.h:825:5: note: candidate: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key, _Compare, _Alloc>&)
     operator==(const multiset<_Key, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_multiset.h:825:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::multiset<_Key, _Compare, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/set:61:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_set.h:842:5: note: candidate: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key, _Compare, _Alloc>&)
     operator==(const set<_Key, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_set.h:842:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::set<_Key, _Compare, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/set:60:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_tree.h:1273:5: note: candidate: template<class _Key, class _Val, class _KeyOfValue, class _Compare, class _Alloc> bool std::operator==(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&, const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&)
     operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
     ^
/usr/include/c++/5/bits/stl_tree.h:1273:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/set:60:0,
                 from catch.hpp:2808,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_tree.h:324:5: note: candidate: template<class _Val> bool std::operator==(const std::_Rb_tree_iterator<_Tp>&, const std::_Rb_tree_const_iterator<_Val>&)
     operator==(const _Rb_tree_iterator<_Val>& __x,
     ^
/usr/include/c++/5/bits/stl_tree.h:324:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::_Rb_tree_iterator<_Tp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/iterator:66:0,
                 from catch.hpp:2340,
                 from test.cpp:2:
/usr/include/c++/5/bits/stream_iterator.h:130:5: note: candidate: template<class _Tp, class _CharT, class _Traits, class _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)
     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
     ^
/usr/include/c++/5/bits/stream_iterator.h:130:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:347:5: note: candidate: template<class _Tp> bool std::operator==(std::nullptr_t, const std::shared_ptr<_Tp1>&)
     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr.h:347:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   cannot convert ‘Catch::Internal::opCast<std::complex<double> >((* & lhs))’ (type ‘std::complex<double>’) to type ‘std::nullptr_t’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:342:5: note: candidate: template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp1>&, std::nullptr_t)
     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr.h:342:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::shared_ptr<_Tp1>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:336:5: note: candidate: template<class _Tp1, class _Tp2> bool std::operator==(const std::shared_ptr<_Tp1>&, const std::shared_ptr<_Tp2>&)
     operator==(const shared_ptr<_Tp1>& __a,
     ^
/usr/include/c++/5/bits/shared_ptr.h:336:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::shared_ptr<_Tp1>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/shared_ptr.h:52:0,
                 from /usr/include/c++/5/memory:82,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr_base.h:1194:5: note: candidate: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)
     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr_base.h:1194:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   cannot convert ‘Catch::Internal::opCast<std::complex<double> >((* & lhs))’ (type ‘std::complex<double>’) to type ‘std::nullptr_t’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/shared_ptr.h:52:0,
                 from /usr/include/c++/5/memory:82,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr_base.h:1189:5: note: candidate: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)
     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
     ^
/usr/include/c++/5/bits/shared_ptr_base.h:1189:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::__shared_ptr<_Tp, _Lp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/shared_ptr.h:52:0,
                 from /usr/include/c++/5/memory:82,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr_base.h:1183:5: note: candidate: template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2, _Lp>&)
     operator==(const __shared_ptr<_Tp1, _Lp>& __a,
     ^
/usr/include/c++/5/bits/shared_ptr_base.h:1183:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::__shared_ptr<_Tp1, _Lp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:81:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/unique_ptr.h:635:5: note: candidate: template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t, const std::unique_ptr<_Tp, _Dp>&)
     operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
     ^
/usr/include/c++/5/bits/unique_ptr.h:635:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   cannot convert ‘Catch::Internal::opCast<std::complex<double> >((* & lhs))’ (type ‘std::complex<double>’) to type ‘std::nullptr_t’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:81:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/unique_ptr.h:630:5: note: candidate: template<class _Tp, class _Dp> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)
     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
     ^
/usr/include/c++/5/bits/unique_ptr.h:630:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::unique_ptr<_Tp, _Dp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:81:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/unique_ptr.h:624:5: note: candidate: template<class _Tp, class _Dp, class _Up, class _Ep> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up, _Ep>&)
     operator==(const unique_ptr<_Tp, _Dp>& __x,
     ^
/usr/include/c++/5/bits/unique_ptr.h:624:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::unique_ptr<_Tp, _Dp>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:79:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/functional:2339:5: note: candidate: template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t, const std::function<_Res(_ArgTypes ...)>&)
     operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
     ^
/usr/include/c++/5/functional:2339:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   cannot convert ‘Catch::Internal::opCast<std::complex<double> >((* & lhs))’ (type ‘std::complex<double>’) to type ‘std::nullptr_t’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/memory:79:0,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/functional:2333:5: note: candidate: template<class _Res, class ... _Args> bool std::operator==(const std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)
     operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
     ^
/usr/include/c++/5/functional:2333:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::function<_Res(_ArgTypes ...)>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/functional:55:0,
                 from /usr/include/c++/5/memory:79,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/tuple:915:5: note: candidate: template<class ... _TElements, class ... _UElements> constexpr bool std::operator==(const std::tuple<_Elements ...>&, const std::tuple<_Elements ...>&)
     operator==(const tuple<_TElements...>& __t,
     ^
/usr/include/c++/5/tuple:915:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::tuple<_Elements ...>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/tuple:39:0,
                 from /usr/include/c++/5/functional:55,
                 from /usr/include/c++/5/memory:79,
                 from catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/array:240:5: note: candidate: template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)
     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
     ^
/usr/include/c++/5/array:240:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::array<_Tp, _Nm>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1878:5: note: candidate: template<class _RealType1> bool std::operator==(const std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)
     operator==(const std::normal_distribution<_RealType>& __d1,
     ^
/usr/include/c++/5/bits/random.tcc:1878:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::normal_distribution<_RealType>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/vector:64:0,
                 from /usr/include/c++/5/bits/random.h:34,
                 from /usr/include/c++/5/random:49,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_vector.h:1511:5: note: candidate: template<class _Tp, class _Alloc> bool std::operator==(const std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)
     operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
     ^
/usr/include/c++/5/bits/stl_vector.h:1511:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::vector<_Tp, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/locale_facets.h:48:0,
                 from /usr/include/c++/5/bits/basic_ios.h:37,
                 from /usr/include/c++/5/ios:44,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/streambuf_iterator.h:204:5: note: candidate: template<class _CharT, class _Traits> bool std::operator==(const std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT, _Traits>&)
     operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
     ^
/usr/include/c++/5/bits/streambuf_iterator.h:204:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::istreambuf_iterator<_CharT, _Traits>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:303:3: note: candidate: bool std::operator==(const std::error_condition&, const std::error_condition&)
   operator==(const error_condition& __lhs,
   ^
/usr/include/c++/5/system_error:303:3: note:   no known conversion for argument 1 from ‘std::complex<double>’ to ‘const std::error_condition&’
/usr/include/c++/5/system_error:296:3: note: candidate: bool std::operator==(const std::error_condition&, const std::error_code&)
   operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
   ^
/usr/include/c++/5/system_error:296:3: note:   no known conversion for argument 1 from ‘std::complex<double>’ to ‘const std::error_condition&’
/usr/include/c++/5/system_error:289:3: note: candidate: bool std::operator==(const std::error_code&, const std::error_condition&)
   operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
   ^
/usr/include/c++/5/system_error:289:3: note:   no known conversion for argument 1 from ‘std::complex<double>’ to ‘const std::error_code&’
/usr/include/c++/5/system_error:284:3: note: candidate: bool std::operator==(const std::error_code&, const std::error_code&)
   operator==(const error_code& __lhs, const error_code& __rhs) noexcept
   ^
/usr/include/c++/5/system_error:284:3: note:   no known conversion for argument 1 from ‘std::complex<double>’ to ‘const std::error_code&’
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4937:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4937:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4925:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const _CharT* __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4925:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   mismatched types ‘const _CharT*’ and ‘std::complex<double>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4911:5: note: candidate: template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value, bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const std::__cxx11::basic_string<_CharT>&)
     operator==(const basic_string<_CharT>& __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4911:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:4904:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/include/c++/5/bits/basic_string.h:4904:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/string:41:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/allocator.h:134:5: note: candidate: template<class _Tp> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_CharT>&)
     operator==(const allocator<_Tp>&, const allocator<_Tp>&)
     ^
/usr/include/c++/5/bits/allocator.h:134:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::allocator<_CharT>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/string:41:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/allocator.h:128:5: note: candidate: template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_T2>&)
     operator==(const allocator<_T1>&, const allocator<_T2>&)
     ^
/usr/include/c++/5/bits/allocator.h:128:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::allocator<_CharT>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:1071:5: note: candidate: template<class _Iterator> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_Iterator>&)
     operator==(const move_iterator<_Iterator>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:1071:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::move_iterator<_Iterator>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:1065:5: note: candidate: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_IteratorR>&)
     operator==(const move_iterator<_IteratorL>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:1065:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::move_iterator<_Iterator>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:342:5: note: candidate: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)
     operator==(const reverse_iterator<_IteratorL>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:342:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::reverse_iterator<_Iterator>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_iterator.h:292:5: note: candidate: template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)
     operator==(const reverse_iterator<_Iterator>& __x,
     ^
/usr/include/c++/5/bits/stl_iterator.h:292:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::reverse_iterator<_Iterator>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:64:0,
                 from /usr/include/c++/5/bits/char_traits.h:39,
                 from /usr/include/c++/5/ios:40,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/stl_pair.h:214:5: note: candidate: template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)
     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
     ^
/usr/include/c++/5/bits/stl_pair.h:214:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::pair<_T1, _T2>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from /usr/include/c++/5/iosfwd:40:0,
                 from /usr/include/c++/5/ios:38,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/postypes.h:216:5: note: candidate: template<class _StateT> bool std::operator==(const std::fpos<_StateT>&, const std::fpos<_StateT>&)
     operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
     ^
/usr/include/c++/5/bits/postypes.h:216:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:2:0:
catch.hpp:1336:40: note:   ‘std::complex<double>’ is not derived from ‘const std::fpos<_StateT>’
             return bool( opCast( lhs ) ==  opCast( rhs ) );
                                        ^
In file included from test.cpp:2:0:
catch.hpp:2659:21: note: candidate: bool Catch::Detail::operator==(const Catch::Detail::Approx&, double)
         friend bool operator == ( Approx const& lhs, double rhs ) {
                     ^
catch.hpp:2659:21: note:   no known conversion for argument 1 from ‘std::complex<double>’ to ‘const Catch::Detail::Approx&’
catch.hpp:2654:21: note: candidate: bool Catch::Detail::operator==(double, const Catch::Detail::Approx&)
         friend bool operator == ( double lhs, Approx const& rhs ) {
                     ^
catch.hpp:2654:21: note:   no known conversion for argument 1 from ‘std::complex<double>’ to ‘double’
makefile:5: recipe for target 'test.o' failed
make: *** [test.o] Error 1
